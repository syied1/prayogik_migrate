datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String   @unique
  emailVerified          Boolean  @default(false)
  emailVerificationToken String?
  resetToken             String?
  tokenUsed              Boolean?
  password               String?
  isAdmin                Boolean  @default(false)
  isSuperAdmin           Boolean  @default(false)
  role                   Role     @default(STUDENT)

  teacherId String? @db.ObjectId
  teacher   User?   @relation("TeacherStudents", fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  students  User[]  @relation("TeacherStudents")

  // One-to-many: Teacher can create many courses
  createdCourses Course[] @relation("TeacherCourses")

  // Many-to-many: Student can enroll in many courses
  enrolledCourseIds String[] @db.ObjectId
  enrolledCourses   Course[] @relation("StudentCourses", references: [id], fields: [enrolledCourseIds])

  userProgress UserProgress[]
  purchases    Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false)

  // Teacher relationship
  teacherId String @db.ObjectId
  teacher   User   @relation("TeacherCourses", fields: [teacherId], references: [id])

  // Many-to-many: Course can be enrolled by many students
  studentIds String[] @db.ObjectId
  students   User[]   @relation("StudentCourses", references: [id], fields: [studentIds])

  categoryId  String?      @db.ObjectId
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  slug    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String               @unique
  description String?
  videoUrl    String?
  videoStatus videoUploadingStatus @default(processing)
  position    Int
  isPublished Boolean              @default(false)
  isFree      Boolean              @default(false)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, courseId]) // Composite unique constraint
  @@index([courseId])
}

model UserProgress {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  aamarPayData AamarPayData?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model AamarPayData {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  purchaseId String   @unique @db.ObjectId
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  pg_txnid          String
  payment_type      String
  amount            String
  currency          String
  amount_bdt        String
  amount_currency   String
  rec_amount        String
  processing_ratio  String
  processing_charge String
  date_processed    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums
enum Role {
  TEACHER
  STUDENT
}

enum videoUploadingStatus {
  processing
  ready
}